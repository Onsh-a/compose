{"mappings":"IAYAA,EAZkBC,IACjB,GAAqB,IAAjBA,EAAoB,MAAO,OAC/B,KAAMA,EAAc,OAAOC,IAC3B,IAAIC,EAASC,QAAQH,GAAcI,MAAM,IACrCC,EAAM,CAAC,GAAG,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,MAAM,OAAO,KACvD,GAAG,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,MAAM,OAAO,KAC7C,GAAG,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,MAAM,OAAO,MAC1CC,EAAQ,GAAIC,EAAI,EACpB,KAAOA,KAAKD,GAASD,GAAKH,EAAOM,MAAa,GAAJD,IAAY,IAAMD,EAC5D,OAAOG,OAAOP,EAAOQ,KAAK,IAAM,GAAGA,KAAK,KAAOJ,GCThD,MAAMK,EAAQ,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KACrEC,EAAW,CACfC,IAAK,CAAC,EAAG,EAAG,GACZC,EAAG,CAAC,EAAG,EAAG,GACVC,IAAK,CAAC,EAAG,EAAG,IASRC,EAAgBC,IACpB,IAAIC,EAAYD,EAAMb,MAAM,IAG5B,OAFAc,EAAYA,EAAUC,QAAOC,GAAQ,YAAYC,KAAKD,KACtDF,EAAUI,QACHJ,EAAUR,KAAK,KAAO,OAGzBa,EAAWN,GACRA,EAAMb,MAAM,IAAIoB,SAAS,KAAO,GAAGP,EAAM,MAAQ,GAAGA,EAAM,K,IAGnEQ,EAlBmBR,IACjB,MAAMC,EAAYF,EAAaC,GACzBS,EAAaf,EAAMgB,QAAQJ,EAAQN,IACnCW,EAAYjB,EAAMkB,MAAMH,GAAYI,OAAOnB,EAAMkB,MAAM,EAAGH,IAChE,OAAOd,EAASM,GAAWa,KAAIX,GAAQQ,EAAUR,MCPnDY,SAASC,iBAAiB,oBAAoB,WAE7C,MAAMC,EAAQ,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAIrEC,EAAgB,CACrBC,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC1BC,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAIrBC,EAAmB,CACxBF,MAAO,CAAC,EAAG,EAAG,GACdC,MAAO,CAAC,EAAG,EAAG,EAAG,IAIZE,EAAW,CAChBC,KAAM,IACNC,MAAO,QACPC,WAAY,WACX,OAAOP,EAAcQ,KAAKF,QAE3BG,WAAY,UAGb,IAAIC,EAAQ,GAEZ,MAAMC,EAAWd,SAASe,iBAAiB,iFACrCC,EAAahB,SAASiB,cAAc,kBACpCC,EAAqBlB,SAASiB,cAAc,qCAC5CE,EAAkBnB,SAASiB,cAAc,kCAG/CH,EAASM,SAAQ,CAAChC,EAAMb,KACvBa,EAAKa,iBAAiB,SAAUoB,IAC/BC,EAAalC,GACbyB,EAAQU,EAAWhB,EAASC,KAAMN,EAAOK,EAASG,cAClDM,EAAWQ,UAAYX,EACvBY,EAAiBZ,EAAON,EAASE,OAC9BiB,IACHC,EAAYd,SAIde,YAAW,KACV5B,SAASiB,cAAc,iCAAiCY,cAAc,IAAIC,MAAM,YAC9E,KAEH,MAAMR,EAAgBS,IACrB,MAAMC,EAAUD,EAAKE,QAAQC,KAC7B3B,EAASyB,GAAuB,SAAZA,EAAqBD,EAAKI,UAAYJ,EAAKI,UAAUC,cACzDL,EAAKM,QAAQ,mBACJpB,cAAc,WAC9BqB,UAAUC,OAAO,UAC1BR,EAAKO,UAAUE,IAAI,WAGdjB,EAAa,CAAC7B,EAAY+C,EAAOC,KACtChD,EAAa+C,EAAM9C,QAAQD,GAC3B,MAAME,EAAY6C,EAAM5C,MAAMH,GAAYI,OAAO2C,EAAM5C,MAAM,EAAGH,IAChE,OAAOgD,EAAa3C,KAAIX,GAAQQ,EAAUR,MAGrCqC,EAAmB,CAAChB,EAAOkC,KAChC,MAAMC,EAAUtC,EAAiBqC,GAC3BE,EAAiB,GACjBC,EAAc,GACpB,IAAIC,EACAC,EAEJvC,EAAMW,SAAQ,CAAChC,EAAM6D,KACpB,GAAIL,EAAQpD,SAASyD,GAAQ,OAAOJ,EAAeK,KAAK,CAAEjE,MAAOG,EAAM+D,KAAMpF,EAASkF,EAAQ,KAC9FH,EAAYI,KAAK,CAAEjE,MAAOG,EAAM+D,KAAMpF,EAASkF,EAAQ,QAGhC,UAApBN,GACHI,EAAkBD,EAAY/C,KAAI,CAACX,EAAM6D,IAAU,mBACtC7D,EAAK+D,6CACS/D,EAAKH,QAAkB,IAAVgE,EAAc,MAAQ,mBAC9DD,EAAqBH,EAAe9C,KAAI,CAACX,EAAM6D,IAAU,mBAC5C7D,EAAK+D,8CACS/D,EAAKH,uBAEhC8D,EAAkBD,EAAY/C,KAAI,CAACX,EAAM6D,IAAU,mBACtC7D,EAAK+D,8CACS/D,EAAKH,QAAkB,IAAVgE,EAAc,MAAQ,mBAC9DD,EAAqBH,EAAe9C,KAAI,CAACX,EAAM6D,IAAU,mBAC5C7D,EAAK+D,8CACS/D,EAAKH,QAAkB,IAAVgE,EAAc,IAAM,mBAG7D/B,EAAmBM,UAAYwB,EAAmBtE,KAAK,IACvDyC,EAAgBK,UAAYuB,EAAgBrE,KAAK,KAG5CgD,EAAuB,KAC3B,MAAM0B,EAASpD,SAASe,iBAAiB,UAClCsC,EAAarD,SAASiB,cAAc,eAC1CmC,EAAOhC,SAAShC,IACdA,EAAKa,iBAAiB,SAAUoB,IAC9BgC,EAAW7B,UAAY,GAAGH,EAAEiC,OAAOnB,eAAe1C,EAAU4B,EAAEiC,OAAOnB,oBAQtEoB,EAASvD,SAASiB,cAAc,WAChCuC,EAAMD,EAAOE,WAAW,MAC9BD,EAAI/C,MAAM,EAAG,GACb,MAAMiD,EAAgB,EAAC,GAAM,GAAO,GAAM,GAAO,GAAM,GAAM,GAAO,GAAM,GAAO,GAAM,GAAO,GAExFC,EAAgB,CACrB,CAAC,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,MAC5E,CAAC,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,MAC5E,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,KAC7E,CAAC,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,KAC7E,CAAC,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAC7E,CAAC,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,OAGvEC,EAAgB,GAChBC,EAAa,GAMblC,EAAelB,IACpB+C,EAAIM,UAAU,EAAG,EAAGP,EAAOQ,MAAOR,EAAOS,QACzCC,EANiB,CAACxD,GACXP,EAAMH,KAAKX,GAASqB,EAAMjB,SAASJ,KAKnC8E,CAAUzD,GAAQiD,EAAenD,EAASK,aAG5CqD,EAAS,CAACE,EAAYC,EAAaxD,KACxC,GAAmB,UAAfA,EAAwB,CAC3B,IAAIyD,EAAU,GACVC,EAAU,EAEdF,EAAYhD,SAAQ,CAAC/C,EAAK4E,KACzB,MAAMsB,EAASJ,EAAWlB,GAC1BO,EAAIgB,UAAY,GAChBhB,EAAIiB,YAAc,QACdpG,GACHmF,EAAIkB,UAAYH,EAAS,YAAc,QACvCf,EAAImB,yBAA2B,mBAC/BnB,EAAIoB,SAASP,EAASC,EAAS,EAAG,IAClCd,EAAIqB,WAAWR,EAASC,EAAS,EAAG,MAEpCd,EAAIkB,UAAYH,EAAS,UAAY,QACrCf,EAAImB,yBAA2B,cAC/BnB,EAAIoB,SAASP,EAASC,EAAS,EAAG,IAClCd,EAAIqB,WAAWR,EAASC,EAAS,EAAG,MAGzB,IAARjG,IAAcgG,GAAW,IACjB,IAARhG,IAA4C,IAA3B+F,EAAYnB,EAAQ,KAAcoB,GAAW,KACpD,IAAVpB,IAAaoB,GAAW,YAEJ,WAAfzD,IACVkE,IACAC,IACAC,EAAkBpB,KAIdkB,EAAoB,KACzBtB,EAAImB,yBAA2B,cAC/BnB,EAAIgB,UAAY,MAQhBhB,EAAIiB,YAAc,QAClBjB,EAAIkB,UAAY,UAChBlB,EAAIqB,WATY,EACA,EACO,IACC,IAOxBrB,EAAIoB,SAVY,EACA,EACO,IACC,IASxB,IAAK,IAAIrG,EAAI,EAAGA,GAAK,GAAIA,GAAK,EAC7BiF,EAAIiB,YAAc,YAClBjB,EAAIyB,OAdW,EAIO,IAUe1G,GACrCiF,EAAI0B,OAAOb,IAXW,IAWqB9F,GAC3CiF,EAAI2B,SAGL,IAAK,IAAIC,EAAI,EAAGA,GAAK,IAAKA,GAAK,EAC9B5B,EAAIyB,OApBW,EAoBKG,EAnBL,GAoBf5B,EAAI0B,OArBW,EAqBKE,EAAGC,IACvB7B,EAAI2B,SAKL3B,EAAI8B,KAAO,yBACX9B,EAAIkB,UAAY,QAChBlB,EAAI+B,SAAS,IAAKlB,GAA0B,IAC5Cb,EAAI+B,SAAS,IAAKlB,GAAsB,IACxCb,EAAI+B,SAAS,IAAKlB,GAA0B,IAC5Cb,EAAI+B,SAAS,KAAMlB,KAA2B,KAGzCU,EAAsB,KAC3B,IAAK,IAAIxG,EAAI,EAAGA,EAAI,EAAGA,IACtBqF,EAAcrF,GAAKoF,EAAcpF,GAAGY,QAAQC,GAASyB,EAAMrB,SAASJ,KACpEyE,EAAWtF,GAAKoF,EAAcpF,GAAGwB,KAAKX,GAASwE,EAAcrF,GAAGiB,SAASJ,MAIrE4F,EAAoB,KACzB,IAAIV,GAAU,GACd,IAAK,IAAI/F,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC3B,IAAI8F,GAAU,EACdC,GAAW,EAEX,IAAK,IAAIkB,EAAI,EAAGA,EAAI,GAAIA,KACE,IAArB3B,EAAWtF,GAAGiH,KAGjBhC,EAAIiC,YACJjC,EAAIkC,IAAIrB,EAAU,EAAGC,EAAS,EAAG,EAAG,EAAIqB,KAAKC,IAC7CpC,EAAIkB,UAAYf,EAAcpF,GAAGiH,KAAOjF,EAASC,KAAO,UAAY,OACpEgD,EAAIqC,OACJrC,EAAIiC,YACJjC,EAAI8B,KAAO,yBACX9B,EAAIkB,UAAY,QAChBlB,EAAI+B,SAAS5B,EAAcpF,GAAGiH,GAAInB,EAAU,EAAI,EAAGC,EAAU,IAT7DD,GAAW","sources":["src/js/helpers/romanizeNumbers.js","src/js/helpers/makeChords.js","src/js/main.js"],"sourcesContent":["const romanize = (arabicNumber) => {\n\tif (arabicNumber === 1) return 'root';\n\tif (!+arabicNumber) return NaN;\n\tlet digits = String(+arabicNumber).split('');\n\tlet key = ['','C','CC','CCC','CD','D','DC','DCC','DCCC','CM',\n\t\t'','X','XX','XXX','XL','L','LX','LXX','LXXX','XC',\n\t\t'','I','II','III','IV','V','VI','VII','VIII','IX'];\n\tlet roman = '', i = 3;\n\twhile (i--) roman = (key[+digits.pop() + (i * 10)] || '') + roman;\n\treturn Array(+digits.join('') + 1).join('M') + roman;\n};\n\nexport default romanize;\n","const notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\nconst patterns = {\n  maj: [0, 4, 7],\n  m: [0, 3, 7],\n  dim: [0, 3, 6]\n}\nconst calcChord = (chord) => {\n  const chordType = getChordType(chord);\n  const startPoint = notes.indexOf(getNote(chord));\n  const sortedArr = notes.slice(startPoint).concat(notes.slice(0, startPoint));\n  return patterns[chordType].map(item => sortedArr[item]);\n};\n\nconst getChordType = (chord) => {\n  let chordType = chord.split('');\n  chordType = chordType.filter(item => /[a-zA-Z]+/.test(item)); // trim '#'\n  chordType.shift();\n  return chordType.join('') || 'maj'\n}\n\nconst getNote = (chord) => {\n  return chord.split('').includes('#') ? `${chord[0]}#` : `${chord[0]}`;\n}\n\nexport default calcChord;\n","import romanize from './helpers/romanizeNumbers.js';\nimport calcChord from \"./helpers/makeChords\";\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n\n\tconst notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n\n\t// тон тон полутон тон тон тон - мажор\n\t// тон полутон тон тон полутон тон  - минор\n\tconst scalePatterns = {\n\t\tmajor: [0, 2, 4, 5, 7, 9, 11],\n\t\tminor: [0, 2, 3, 5, 7, 8, 10],\n\t}\n\n\t// diatonic patterns;\n\tconst diatonicPatterns = {\n\t\tmajor: [0, 3, 4],\n\t\tminor: [0, 2, 5, 6],\n\t}\n\n\t// default settings\n\tconst settings = {\n\t\troot: 'C',\n\t\tscale: 'major',\n\t\tgetPattern: function() {\n\t\t\treturn scalePatterns[this.scale];\n\t\t},\n\t\tinstrument: 'guitar',\n\t}\n\n\tlet scale = [];\n\n\tconst controls = document.querySelectorAll('.select_root_item_name, .select_scale_item_name, .select_instrument_item_name')\n\tconst scaleField = document.querySelector('.result_output');\n\tconst diatonicChordField = document.querySelector('.progression_chords_diatonic_item');\n\tconst basicChordField = document.querySelector('.progression_chords_basic_item');\n\n\n\tcontrols.forEach((item, i) => { // main function from rootnote\n\t\titem.addEventListener('click', (e) => {\n\t\t\ttoggleActive(item);\n\t\t\tscale = buildScale(settings.root, notes, settings.getPattern());\n\t\t\tscaleField.innerHTML = scale;\n\t\t\tdecideOnDiatonic(scale, settings.scale);\n      setChordApplicatures();\n\t\t\tcanvasSetup(scale);\n\t\t})\n\t});\n\n\tsetTimeout(() => {\n\t\tdocument.querySelector('.select_root_item_name.active').dispatchEvent(new Event(\"click\"));\n\t}, 1000)\n\n\tconst toggleActive = (elem) => {\n\t\tconst setting = elem.dataset.type;\n\t\tsettings[setting] = setting === 'root' ? elem.innerText : elem.innerText.toLowerCase();\n\t\tconst wrapper = elem.closest('.select-wrapper');\n\t\tconst previous = wrapper.querySelector('.active');\n\t\tprevious.classList.remove('active')\n\t\telem.classList.add('active');\n\t}\n\n\tconst buildScale = (startPoint, notes, scalePattern) => {\n\t\tstartPoint = notes.indexOf(startPoint);\n\t\tconst sortedArr = notes.slice(startPoint).concat(notes.slice(0, startPoint));\n\t\treturn scalePattern.map(item => sortedArr[item]);\n\t}\n\n\tconst decideOnDiatonic = (scale, diatonicPattern) => {\n\t\tconst pattern = diatonicPatterns[diatonicPattern];\n\t\tconst diatonicChords = [];\n\t\tconst basicChords = [];\n\t\tlet basicChordsText;\n\t\tlet diatonicChordsText;\n\n\t\tscale.forEach((item, index) => {\n\t\t\tif (pattern.includes(index)) return diatonicChords.push({ chord: item, step: romanize(index + 1) })\n\t\t\tbasicChords.push({ chord: item, step: romanize(index + 1) });\n\t\t});\n\n\t\tif (diatonicPattern === 'major') {\n\t\t\tbasicChordsText = basicChords.map((item, index) => `\n        <span>${item.step}:</span>\n        <span class=\"chord\">${item.chord}${index === 3 ? 'dim' : 'm'}</span><br>`)\n\t\t\tdiatonicChordsText = diatonicChords.map((item, index) => `\n        <span>${item.step}:</span> \n        <span class=\"chord\">${item.chord}</span><br>`);\n\t\t} else {\n\t\t\tbasicChordsText = basicChords.map((item, index) => `\n        <span>${item.step}:</span> \n        <span class=\"chord\">${item.chord}${index === 0 ? 'dim' : 'm'}</span><br>`)\n\t\t\tdiatonicChordsText = diatonicChords.map((item, index) => `\n        <span>${item.step}:</span> \n        <span class=\"chord\">${item.chord}${index === 0 ? 'm' : ''}</span><br>`)\n\t\t}\n\n\t\tdiatonicChordField.innerHTML = diatonicChordsText.join('');\n\t\tbasicChordField.innerHTML = basicChordsText.join('');\n\t}\n\n\tconst setChordApplicatures = () => {\n\t  const chords = document.querySelectorAll('.chord')\n    const chordField = document.querySelector('.chord-apps');\n    chords.forEach((item) => {\n      item.addEventListener('click', (e) => {\n        chordField.innerHTML = `${e.target.innerText} = ${calcChord(e.target.innerText)}`;\n        // renderChordShape();\n      })\n    })\n  }\n\n\t// ======================= canvas settings ========================\n\n\tconst canvas = document.querySelector('.canvas');\n\tconst ctx = canvas.getContext('2d');\n\tctx.scale(6, 6);\n\tconst pianoKeyboard = [true, false, true, false, true, true, false, true, false, true, false, true] // true - нижняя, false - верхняя\n\n\tconst guitarStrings = [\n\t\t['E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#'], // first\n\t\t['B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#'],\n\t\t['G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A'],\n\t\t['D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E'],\n\t\t['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'],\n\t\t['E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#']\n\t]\n\n\tconst notesOnString = []; // array with current notes on the fretboard (active in scale)\n\tconst isToRender = []; // array with pattern to render these notes\n\n\tconst rightKeys = (scale) => {\n\t\treturn notes.map((item) => scale.includes(item));\n\t}\n\n\tconst canvasSetup = (scale) => {\n\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\t\trender(rightKeys(scale), pianoKeyboard, settings.instrument);\n\t}\n\n\tconst render = (activeKeys, keysPattern, instrument) => {\n\t\tif (instrument === 'piano') {\n\t\t\tlet x_coord = 40;\n\t\t\tlet y_coord = 3;\n\n\t\t\tkeysPattern.forEach((key, index) => {\n\t\t\t\tconst active = activeKeys[index];\n\t\t\t\tctx.lineWidth = 0.2;\n\t\t\t\tctx.strokeStyle = 'black';\n\t\t\t\tif (key) {\n\t\t\t\t\tctx.fillStyle = active ? 'lightgrey' : 'white';\n\t\t\t\t\tctx.globalCompositeOperation = \"destination-over\";\n\t\t\t\t\tctx.fillRect(x_coord, y_coord, 8, 40);\n\t\t\t\t\tctx.strokeRect(x_coord, y_coord, 8, 40);\n\t\t\t\t} else {\n\t\t\t\t\tctx.fillStyle = active ? 'darkred' : 'black';\n\t\t\t\t\tctx.globalCompositeOperation = \"source-over\";\n\t\t\t\t\tctx.fillRect(x_coord, y_coord, 6, 30);\n\t\t\t\t\tctx.strokeRect(x_coord, y_coord, 6, 30);\n\t\t\t\t}\n\n\t\t\t\tif (key === true) x_coord += 5;\n\t\t\t\tif (key === false && keysPattern[index + 1] !== false) x_coord += 2.5;\n\t\t\t\tif (index === 4) x_coord += 2.5;\n\t\t\t})\n\t\t} else if (instrument === 'guitar') {\n\t\t\tcanvasGuitarSetup();\n\t\t\tgetNotesOnFretBoard();\n\t\t\trenderGuitarNotes(notesOnString);\n\t\t}\n\t};\n\n\tconst canvasGuitarSetup = () => {\n\t\tctx.globalCompositeOperation = \"source-over\";\n\t\tctx.lineWidth = '0.4'\n\t\tconst x_coord = 8\n\t\tconst y_coord = 3\n\t\tconst fretboardWidth = 120;\n\t\tconst fretboardHeight = 35;\n\t\tconst y_coord_string = 3.3;\n\t\tconst x_fret = x_coord;\n\t\tconst y_fret = y_coord;\n\t\tctx.strokeStyle = 'black'\n\t\tctx.fillStyle = '#a36f40';\n\t\tctx.strokeRect(x_coord, y_coord, fretboardWidth, fretboardHeight)\n\t\tctx.fillRect(x_coord, y_coord, fretboardWidth, fretboardHeight);\n\n\t\tfor (let i = 2; i <= 36; i += 6) { // generate strings\n\t\t\tctx.strokeStyle = 'lightgrey';\n\t\t\tctx.moveTo(x_coord, y_coord_string + i);\n\t\t\tctx.lineTo(x_coord + 120, y_coord_string + i);\n\t\t\tctx.stroke();\n\t\t}\n\n\t\tfor (let i = 8; i <= 119; i += 8) { // generate frets\n\t\t\tctx.moveTo(x_fret + i, y_fret);\n\t\t\tctx.lineTo(x_fret + i, y_fret + fretboardHeight);\n\t\t\tctx.stroke();\n\t\t}\n\n\t\t// sets fret numbers\n\t\tconst step = 8.5\n\t\tctx.font = '4px Nunito, sans-serif';\n\t\tctx.fillStyle = 'black'\n\t\tctx.fillText('5', x_coord + (step * 4) + 1, 43);\n\t\tctx.fillText('7', x_coord + (step * 6), 43);\n\t\tctx.fillText('9', x_coord + (step * 8) - 1, 43);\n\t\tctx.fillText('12', x_coord + (step * 11) - 4, 43);\n\t}\n\n\tconst getNotesOnFretBoard = () => {\n\t\tfor (let i = 0; i < 6; i++) {\n\t\t\tnotesOnString[i] = guitarStrings[i].filter((item) => scale.includes(item));\n\t\t\tisToRender[i] = guitarStrings[i].map((item) => notesOnString[i].includes(item));\n\t\t}\n\t}\n\n\tconst renderGuitarNotes = () => {\n\t\tlet y_coord = -0.5\n\t\tfor (let i = 0; i < 6; i++) {\n\t\t\tlet x_coord = -4;\n\t\t\ty_coord += 6;\n\n\t\t\tfor (let j = 0; j < 15; j++) {\n\t\t\t\tif (isToRender[i][j] !== true) {\n\t\t\t\t\tx_coord += 8; // if note is absent\n\t\t\t\t} else {\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.arc(x_coord + 8, y_coord, 2, 0, 2 * Math.PI);\n\t\t\t\t\tctx.fillStyle = guitarStrings[i][j] !== settings.root ? '#26CC26' : 'gold'\n\t\t\t\t\tctx.fill()\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.font = '3px Nunito, sans-serif';\n\t\t\t\t\tctx.fillStyle = 'black'\n\t\t\t\t\tctx.fillText(guitarStrings[i][j], x_coord + 8 - 1, y_coord + 1);\n\t\t\t\t\tx_coord += 8;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// chords canvas\n  // TODO create chord shape drawing canvas\n});\n"],"names":["$8dddf2b0897aa1fb$export$2e2bcd8739ae039","arabicNumber","NaN","digits","String","split","key","roman","i","pop","Array","join","$52cd1e1a023d0798$var$notes","$52cd1e1a023d0798$var$patterns","maj","m","dim","$52cd1e1a023d0798$var$getChordType","chord","chordType","filter","item","test","shift","$52cd1e1a023d0798$var$getNote","includes","$52cd1e1a023d0798$export$2e2bcd8739ae039","startPoint","indexOf","sortedArr","slice","concat","map","document","addEventListener","notes1","scalePatterns","major","minor","diatonicPatterns","settings","root","scale","getPattern","this","instrument","scale1","controls","querySelectorAll","scaleField","querySelector","diatonicChordField","basicChordField","forEach","e","toggleActive","buildScale","innerHTML","decideOnDiatonic","setChordApplicatures","canvasSetup","setTimeout","dispatchEvent","Event","elem","setting","dataset","type","innerText","toLowerCase","closest","classList","remove","add","notes","scalePattern","diatonicPattern","pattern","diatonicChords","basicChords","basicChordsText","diatonicChordsText","index","push","step","chords","chordField","target","canvas","ctx","getContext","pianoKeyboard","guitarStrings","notesOnString","isToRender","clearRect","width","height","render","rightKeys","activeKeys","keysPattern","x_coord","y_coord","active","lineWidth","strokeStyle","fillStyle","globalCompositeOperation","fillRect","strokeRect","canvasGuitarSetup","getNotesOnFretBoard","renderGuitarNotes","moveTo","lineTo","stroke","i1","y_fret","font","fillText","j","beginPath","arc","Math","PI","fill"],"version":3,"file":"index.2be27169.js.map"}