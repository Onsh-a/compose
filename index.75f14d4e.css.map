{"mappings":"ACCE;;;;;;;AAAA;;;;;;;AAAA;;;;;;;ACDF;;;;;;;;;AASA;;;;AAIA;;;;;;;;;;AAUA;;;;;;;;ACvBA;;;;;AAIE;;;;AAIA;;;;AAIA;;;;;;;AAOA;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;;;AAMA;;;;;AC5CF;;;;;;;;;AAQE;;;;;;;;AAQA;;;;;;;;;AAQE;;;;AAIA;;;;AAKF;;;;;;AAIE;;;;ACrCJ;;;;;;;;;;;;;AAYE;;;;ACXA;;;;AAIA;;;;;;;;;AASA;;;;;;;ACdF;;;;;;;AAME;;;;;;;;;;AAUA;;;;;;;AAQA;;;;;;;;;;;;AAWE;;;;AAIA;;;;;;AAMA;;;;AAKF;;;;;;;;;AASE;;;;;;;;;;;;AAYA;EArBF;;;;;;EA2BI;;;;;;;;;;;;;AAcJ;;;;;;;;;;;;;AAYE;;;;;;ACvGJ;;;;;;;AAME;;;;A;;;;;A;;;;ACkBA;;;;A;;;;;;;;A;;;;;;;;;AC0CI;;;;AAGF;;;;;;;;;;;AAUA;;;;;;;;;;;;;;AAaE;;;;;;;;;;;;;;A;;;;;;;;AC1BN;;;;;;;;AAOE;;;;AAGF;;;;;AAII;;;;;;AAKA;;;;A;;;;;;AAQJ;;;;;;;A;;;;;AAUI;;;;;;;;;;;;;;AAaA;;;;;;AAKA;;;;A;;;;;;;;;ACzGF;;;;;;;A;;;;;;;;;;;;;A;;;;;;A;;;;;;;;;;;;A;;;;ACoEI;;;;AAGE;;;;;;;;;;;;;;;AAcJ;;;;;;;;;AAQE;;;;;A;;;;AAOE;;;;AAGN;;;;AAGE;;;;;AAIA;;;;;A;;;;;;;A;;;;;;A","sources":["src/sass/style.scss","src/sass/_fonts.scss","src/sass/elements/_base.scss","src/sass/elements/_progressions.scss","src/sass/elements/_scale.scss","src/sass/elements/_container.scss","src/sass/elements/_chord.scss","src/sass/elements/_rootnote.scss","src/sass/elements/_select.scss","src/components/ui/UiCustomSelectOption.vue","src/components/ui/UiCustomSelect.vue","src/views/ChordApplicature.vue","src/views/NotFound.vue","src/components/Navigation.vue","src/components/Header.vue"],"sourcesContent":["@import 'vars';\r\n@import \"fonts\";\r\n@import \"elements/general\";\r\n",null,null,null,null,null,null,null,null,"<template>\n  <div class=\"option\" @click=\"$emit('option-selected', option)\">\n    <input type=\"radio\" class=\"radio\" :id=\"option.value\" name=\"category\"/>\n    <label :for=\"option.value\">{{ option.name }}</label>\n  </div>\n</template>\n\n<script setup>\ndefineProps({\n  option: Object,\n});\n\ndefineEmits([\n  'option-selected'\n]);\n</script>\n\n<style lang=\"scss\">\n.option {\n  padding: 10px 15px;\n  cursor: pointer;\n\n  label {\n    cursor: pointer;\n  }\n\n  .radio {\n    display: none;\n  }\n}\n\n</style>\n\n","<template>\n  <div :class=\"['ui-select', {'active': isActive }]\" ref=\"select\">\n    <div class=\"ui-select__selected\" @click=\"toggleAcitve\">\n      {{ currentValue ? currentValue : options[0] }}\n    </div>\n    <div class=\"ui-select__options\">\n      <template v-for=\"option in options\">\n        <ui-custom-select-option :option=\"option\" @option-selected=\"updateSelect\" />\n      </template>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport UiCustomSelectOption from './UiCustomSelectOption.vue';\nimport { ref } from 'vue';\n\nconst props = defineProps({\n  options: Array,\n  value: Object,\n})\n\nconst emit = defineEmits(['select']);\n\nconst currentValue = ref(props.value ? props.value : props.options[0].name);\nconst isActive = ref(false);\nconst select = ref(null);\n\nconst closeSelect = (e) => {\n  if (!select.value.contains(e.target)) {\n    isActive.value = false;\n  }\n}\n\nconst toggleAcitve = () => {\n  isActive.value = !isActive.value;\n  if (!isActive.value) {\n    document.removeEventListener('click', closeSelect);\n    return;\n  }\n  document.addEventListener('click', closeSelect);\n}\n\nconst updateSelect = (selected) => {\n  isActive.value = false;\n  currentValue.value = selected.name;\n  emit('select', selected);\n}\n\n</script>\n\n<style lang=\"scss\">\n.ui-select {\n  border-radius: 8px;\n  border: 0;\n  position: relative;\n  box-sizing: border-box;\n  width: 100%;\n\n  &.active {\n    .ui-select__options {\n      max-height: 240px;\n      opacity: 1;\n      overflow-y: scroll;\n      outline: none;\n      z-index: 1;\n      box-shadow: 1px 4px 21px 0 rgb(0 0 0 / 85%);\n    }\n\n    .ui-select__selected {\n      border-radius: 8px 8px 0 0;\n    }\n  }\n\n  &__selected {\n    background: #2f3640;\n    border-radius: 8px;\n    color: #f5f6fa;\n    position: relative;\n    padding: 10px 15px;\n    cursor: pointer;\n    order: 0;\n    z-index: 2;\n\n    &::after {\n      content: '';\n      background-image: url('/src/assets/images/arw.svg');\n      background-size: contain;\n      background-repeat: no-repeat;\n      position: absolute;\n      width: 20px;\n      height: 20px;\n      transform: translateY(-50%);\n      right: 10px;\n      top: 50%;\n      transition: all 0.4s;\n    }\n  }\n\n  &__options {\n    box-sizing: border-box;\n    background: #2f3640;\n    color: #f5f6fa;\n    max-height: 0;\n    width: 100%;\n    opacity: 0;\n    border-radius: 0 0 8px 8px;\n    overflow: hidden;\n    order: 1;\n    position: absolute;\n    top: 100%;\n  }\n}\n</style>\n\n","<template>\n  <section class=\"container applicature\">\n    <h2 class=\"applicature-title\">Chord Applicature</h2>\n\n    <div class=\"applicature-root\">\n      <h4 class=\"applicature-root__title\">Choose root:</h4>\n      <div class=\"applicature-root__notes\">\n        <RootNote\n          v-for=\"note in notes\"\n          @rootnote-update=\"rootUpdate\"\n          :note=\"note\"\n          :root=\"root\"\n        />\n      </div>\n    </div>\n\n    <div class=\"applicature-type\">\n      <h4 class=\"applicature-type__title\">Choose chord type:</h4>\n      <div class=\"applicature-type__types\">\n        <button\n          :class=\"['applicature-type__type', { 'active': currentChordType === chordType }]\"\n          v-for=\"chordType in chordTypes\"\n          @click=\"chordTypeUpdate(chordType)\"\n        >\n          {{ chordType }}\n        </button>\n      </div>\n    </div>\n    <ui-canvas class=\"applicature-chord\" instrument=\"piano\" :scale=\"currentChordNotes\" />\n  </section>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\nimport RootNote from '../components/RootNote.vue';\nimport UiCanvas from './../components/ui/UiCanvas.vue';\nimport Chord from '../js/helpers/Chord.js';\n\nconst DEFAULT_ROOT = 'C';\nconst DEFAULT_TYPE = 'major';\nconst chord = new Chord();\nconst chordTypes = chord.getPatterns();\nconst notes = ref(chord.getNotes());\nconst root = ref(DEFAULT_ROOT);\nconst currentChordType = ref(DEFAULT_TYPE);\nconst currentChordNotes = computed(() => {\n  return chord.calcChord(`${root.value}${currentChordType.value}`);\n})\n\nconst rootUpdate = (rootNote) => {\n  root.value = rootNote;\n}\n\nconst chordTypeUpdate = (type) => {\n  currentChordType.value = type;\n}\n\n</script>\n\n<style scoped lang=\"scss\">\n.applicature {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  column-gap: 10px;\n  font-family: Nunito, sans-serif;\n  color: #2f3640;\n}\n\n.applicature-title {\n  text-align: center;\n  margin: 0 auto 15px;\n  font-size: 22px;\n  display: block;\n  grid-column: 1 / 3;\n}\n\n.applicature-root {\n  grid-column: 1 / 2;\n\n  &__title {\n    text-align: center;\n    margin-bottom: 10px;\n  }\n\n  &__notes {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    gap: 5px;\n\n    button {\n      width: 100%;\n    }\n  }\n}\n\n.applicature-type {\n  grid-column: 2 / 3;\n  display: flex;\n  flex-direction: column;\n\n  &__types {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 5px;\n    flex: 1;\n  }\n\n  &__title {\n    text-align: center;\n    margin-bottom: 10px;\n  }\n\n  &__type {\n    width: 100%;\n    height: 100%;\n    color: #FFFFFF;\n    background-color: #2F3640;\n    border: 2px solid #2F3640;\n    border-radius: 8px;\n    justify-content: center;\n    align-items: center;\n    display: flex;\n    cursor: pointer;\n    text-transform: capitalize;\n\n    &.active {\n      color: #2F3640;\n      background-color: #FFFFFF;\n      border: 2px solid #2F3640;\n    }\n  }\n}\n\n.applicature-chord {\n  grid-column: 1 / 3;\n}\n</style>\n\n\n","<template>\n  <section class=\"container\">\n    <h3 class=\"title\">Oops...</h3>\n    <h4 class=\"subtitle\">This page does not seem to exist</h4>\n  </section>\n</template>\n\n<style>\n\n\n.title {\n  text-align: center;\n  margin-top: 55px;\n  margin-bottom: 15px;\n  font-size: 21px;\n  font-family: 'Nunito', sans-serif;\n  color: #2f3640;\n}\n\n.subtitle {\n  text-align: center;\n  font-size: 18px;\n  font-family: 'Nunito', sans-serif;\n  color: #2f3640;\n}\n\n</style>\n","<template>\n  <div :class=\"['nav', {'active': isMenuActive}]\" ref=\"menu\">\n    <div class=\"burger\" @click=\"toggleBurger\">\n      <div class=\"burger-line\"></div>\n      <div class=\"burger-line\"></div>\n      <div class=\"burger-line\"></div>\n    </div>\n    <ul class=\"nav-menu\">\n      <li class=\"nav-menu__item\">\n        <router-link\n          class=\"nav-menu__item-link\"\n          @click=\"toggleBurger\"\n          to=\"/\"\n        >\n          Main\n        </router-link>\n      </li>\n      <li class=\"nav-menu__item\">\n        <router-link\n          class=\"nav-menu__item-link\"\n          to=\"/chord-applicature\"\n          @click=\"toggleBurger\"\n        >\n          Chord Applicatures\n        </router-link>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst isMenuActive = ref(false);\nconst menu = ref(null);\n\nconst closeModal = (e) => {\n  if (!menu.value.contains(e.target)) {\n    toggleBurger();\n  }\n}\n\nconst toggleBurger = () => {\n  isMenuActive.value = !isMenuActive.value;\n  if (!isMenuActive.value) {\n    document.removeEventListener('click', closeModal);\n    return;\n  }\n  document.addEventListener('click', closeModal);\n}\n\n</script>\n\n<style lang=\"scss\" scoped>\n.nav {\n  height: calc(100% - 10px);\n  margin: 5px;\n  width: 30px;\n  background-color: white;\n  border-radius: 8px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  position: relative;\n\n  .burger {\n    width: 100%;\n    height: 100%;\n    position: relative;\n\n    &-line {\n      width: 65%;\n      height: 3px;\n      background-color: #2f3640;\n      position: absolute;\n      left: 50%;\n      top: 50%;\n      transform: translate(-50%, -50%);\n      transition: .2s;\n      border-radius: 8px;\n\n      &:nth-child(1) {\n        top: calc(50% - 6px);\n      }\n\n      &:nth-child(3) {\n        top: calc(50% + 6px);\n      }\n    }\n  }\n\n  &-menu {\n    position: absolute;\n    left: 0;\n    list-style-type: none;\n    display: none;\n    top: calc(100% + 5px);\n    background-color: #2f3640;\n    color: #FFFFFF;\n    min-width: 180px;\n    box-shadow: 1px 4px 21px 0 rgb(0 0 0 / 85%);\n    border-radius: 0 0 8px 8px;\n    overflow: hidden;\n    z-index: 2;\n\n    &__item-link {\n      color: white;\n      text-decoration: none;\n      display: block;\n      cursor: pointer;\n      padding: 10px;\n      transition: .2s;\n\n      &:hover {\n        background-color: #FFFFFF;\n        color: #2f3640;\n      }\n    }\n  }\n\n  &.active {\n    .nav-menu {\n      display: block;\n    }\n\n    .burger {\n      &-line {\n        width: 80%;\n\n        &:nth-child(2) {\n          display: none;\n        }\n\n        &:nth-child(1) {\n          top: 50%;\n          transform: translate(-50%, -50%) rotate(45deg);\n        }\n\n        &:nth-child(3) {\n          top: 50%;\n          transform: translate(-50%, -50%) rotate(-45deg);\n        }\n      }\n    }\n  }\n}\n</style>\n","<template>\n  <header>\n    <div class=\"container\">\n      <Navigation />\n      <h1 class=\"title\">compose.io</h1>\n    </div>\n  </header>\n</template>\n\n<script setup>\nimport Navigation from './Navigation.vue';\n\n</script>\n\n<style lang=\"scss\" scoped>\nheader {\n  background-color: #2f3640;\n  margin-bottom: 20px;\n  height: 40px;\n  z-index: 3;\n\n  .container {\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n\n    .title {\n      color: #FFFFFF;\n      font-family: 'Nunito', sans-serif;\n      font-size: 22px;\n      font-weight: 400;\n      text-align: center;\n      margin: 10px 0 10px auto;\n    }\n  }\n}\n\n</style>\n"],"names":[],"version":3,"file":"index.75f14d4e.css.map","sourceRoot":"/__parcel_source_root/"}