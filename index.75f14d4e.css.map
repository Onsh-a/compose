{"mappings":"ACCE;;;;;;;AAAA;;;;;;;AAAA;;;;;;;ACDF;;;;;;;;AAQA;;;;AAIA;;;;;AAKA;;;;;;;;;;AAUA;;;;;;;;;AE3BA;;;;;AAIE;;;;AAIA;;;;AAIA;;;;;;;AAOA;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;;;AAMA;;;;;AC5CF;;;;;;;;;;;;;AAYE;;;;ACZF;;;;;;;AAME;;;;;;;;;AASA;;;;;;;AAOE;EAPF;;;;;AAYA;;;;;;;;;AASE;;;;;;;;;;;;AAYA;EArBF;;;;;;EA2BI;;;;;;;;;;;;;AAcJ;;;;;;;;;;;;;AAYE;;;;;;AAQJ;;;;;;;AAME;;;;A;;;;;;;A;;;;;;;A;;;;;;;;;A;;;;;;;;;;;;;A;;;;;;A;;;;;;;;;;;;A;;;;AEjBI;;;;AAGE;;;;;;;;;;;;;;;AAcJ;;;;;;;;;AAQE;;;;;A;;;;AAOE;;;;AAGN;;;;AAGE;;;;;AAIA;;;;;A;;;;ACnCJ;;;;;;;;;;AASE;;;;;;AAKA;;;;AAGA;;;;;A;;;;;;A;;;;;;;;;;;ACnDA;;;;;;AAKE;;;;;;;;;AAQA;;;;;;;;;;;AAUA;;;;;A;;;;;;;;;ACzDF;;;;;;;A;;;;;;;;ACoEF;;;;;;;;AAOE;;;;AAGF;;;;;AAII;;;;;;AAKA;;;;A;;;;;;;;AAUA;;;;;;;;;;;;AAWE;;;;;;;;;;;;;AAYA;;;;;AAIA;;;;;;AAKE;;;;;;;AAMR;;;;;A;;;;;;;;;;;;;;AAiBE;;;;;;AAKE;;;;A;;;;;;;;A;;;;;;;;;AC1GE;;;;AAGF;;;;;;;;;;;AAUA;;;;;;;;;;;;;;AAaE;;;;;;;;;;;;;;A;;;;;;A;;;;;ACnEJ;;;;AAGE;;;;A;;;;;;;;;;;;A;;;;ACIF;;;;;;AAKE;;;;A;;;;;;;;;A;;;;;;;ACMF;;;;;;;;;AAQE;;;;AAGE;;;;AAGF;;;;;;AAKF","sources":["src/sass/style.scss","src/sass/_fonts.scss","src/sass/elements/_base.scss","src/sass/vars.scss","src/sass/elements/_progressions.scss","src/sass/elements/_container.scss","src/sass/elements/_rootnote.scss","src/components/Header.vue","src/components/Navigation.vue","src/views/Tuner.vue","src/components/TunerElement.vue","src/views/NotFound.vue","src/views/ChordApplicature.vue","src/components/ui/UiCustomSelect.vue","src/components/ui/UiCustomSelectOption.vue","src/components/RootNote.vue","src/components/ScaleTable.vue"],"sourcesContent":["@import 'vars';\r\n@import 'fonts';\r\n@import 'elements/general';\r\n",null,null,null,null,null,null,"<template>\n  <header>\n    <div class=\"container\">\n      <Navigation />\n      <h1 class=\"title\">compose.io</h1>\n    </div>\n  </header>\n</template>\n\n<script setup>\nimport Navigation from './Navigation.vue';\n\n</script>\n\n<style lang=\"scss\" scoped>\nheader {\n  background-color: #2f3640;\n  margin-bottom: 50px;\n  height: 40px;\n  z-index: 3;\n\n  .container {\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n    align-items: center;\n\n    .title {\n      color: #FFFFFF;\n      font-family: 'Nunito', sans-serif;\n      font-size: 22px;\n      font-weight: 400;\n      text-align: center;\n      margin: 10px 0 10px auto;\n    }\n  }\n}\n\n</style>\n","<template>\n  <div :class=\"['nav', {'active': isMenuActive}]\" ref=\"menu\">\n    <div class=\"burger\" @click=\"toggleBurger\">\n      <div class=\"burger-line\"></div>\n      <div class=\"burger-line\"></div>\n      <div class=\"burger-line\"></div>\n    </div>\n    <ul class=\"nav-menu\">\n      <li class=\"nav-menu__item\" v-for=\"menuItem in menuItems\">\n        <router-link\n          class=\"nav-menu__item-link\"\n          @click=\"toggleBurger\"\n          :to=\"menuItem.path\"\n        >\n          {{ menuItem.name }}\n        </router-link>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport { routes } from './../router';\n\nconst menuItems = routes.filter(item => item.isAvailableInMenu);\nconst isMenuActive = ref(false);\nconst menu = ref(null);\n\nconst closeModal = (e) => {\n  if (!menu.value.contains(e.target)) {\n    toggleBurger();\n  }\n}\n\nconst toggleBurger = () => {\n  isMenuActive.value = !isMenuActive.value;\n  if (!isMenuActive.value) {\n    document.removeEventListener('click', closeModal);\n    return;\n  }\n  document.addEventListener('click', closeModal);\n}\n\n</script>\n\n<style lang=\"scss\" scoped>\n.nav {\n  height: calc(100% - 10px);\n  margin: 5px;\n  width: 30px;\n  background-color: white;\n  border-radius: 8px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  position: relative;\n\n  .burger {\n    width: 100%;\n    height: 100%;\n    position: relative;\n\n    &-line {\n      width: 65%;\n      height: 3px;\n      background-color: #2f3640;\n      position: absolute;\n      left: 50%;\n      top: 50%;\n      transform: translate(-50%, -50%);\n      transition: .2s;\n      border-radius: 8px;\n\n      &:nth-child(1) {\n        top: calc(50% - 6px);\n      }\n\n      &:nth-child(3) {\n        top: calc(50% + 6px);\n      }\n    }\n  }\n\n  &-menu {\n    position: absolute;\n    left: 0;\n    list-style-type: none;\n    display: none;\n    top: calc(100% + 5px);\n    background-color: #2f3640;\n    color: #FFFFFF;\n    min-width: 180px;\n    box-shadow: 1px 4px 21px 0 rgb(0 0 0 / 85%);\n    border-radius: 0 0 8px 8px;\n    overflow: hidden;\n    z-index: 3;\n\n    &__item-link {\n      color: white;\n      text-decoration: none;\n      display: block;\n      cursor: pointer;\n      padding: 10px;\n      transition: .2s;\n\n      &:hover {\n        background-color: #FFFFFF;\n        color: #2f3640;\n      }\n    }\n  }\n\n  &.active {\n    .nav-menu {\n      display: block;\n    }\n\n    .burger {\n      &-line {\n        width: 80%;\n\n        &:nth-child(2) {\n          display: none;\n        }\n\n        &:nth-child(1) {\n          top: 50%;\n          transform: translate(-50%, -50%) rotate(45deg);\n        }\n\n        &:nth-child(3) {\n          top: 50%;\n          transform: translate(-50%, -50%) rotate(-45deg);\n        }\n      }\n    }\n  }\n}\n</style>\n","<template>\n  <div class=\"container\">\n    <div class=\"tuner-settings\">\n      <h4 class=\"tuner-settings__title\">Choose tuning:</h4>\n      <ui-custom-select\n        class=\"tuner-settings__tuning\"\n        :value=\"activeTuning\"\n        :options='tuningOptions'\n        @select=\"activeTuningUpdate\"\n      />\n      <button @click=\"turnMicOn\" class=\"tuner-btn\">Turn on the mic</button>\n      <button @click=\"turnMicOff\" class=\"tuner-btn\">Turn off the mic</button>\n    </div>\n    <TunerElement\n      :note=\"note\"\n      :frequency=\"freq\"\n    />\n  </div>\n</template>\n<script setup lang=\"ts\">\nimport { ref, computed } from 'vue';\nimport type { Ref } from 'vue'\nimport UiCustomSelect from '../components/ui/UiCustomSelect.vue';\nimport TunerElement from '../components/TunerElement.vue';\nimport Tuner from './../js/helpers/Tuner';\nimport tunings from './../js/data/tunings';\n// @ts-ignore\nimport ml5 from './../js/lib/ml5.min';\n\nconst tuningOptions = computed(() => {\n  return Object.keys(tunings);\n})\n\nconst activeTuning = ref(tuningOptions.value[0]);\nconst freq: Ref<number | null> = ref(null);\nconst note: Ref<string | null> = ref(null);\nconst activeTuningUpdate = (updatedTuning: string) => {\n  tuner.setActiveTuning(updatedTuning);\n  activeTuning.value = updatedTuning;\n}\n\nconst tuner = new Tuner();\n// const modelPath = '/model';\nconst modelPath = 'https://cdn.jsdelivr.net/gh/ml5js/ml5-data-and-models/models/pitch-detection/crepe/';\n\nlet audioContext: AudioContext | null;\nlet stream: MediaStream | null;\nlet pitch: any;\n\nconst turnMicOn = async () => {\n  audioContext = new AudioContext();\n  stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });\n  startPitch(stream, audioContext);\n}\n\nconst startPitch = (stream: MediaStream, audioContext: AudioContext) => {\n  pitch = ml5.pitchDetection(modelPath, audioContext , stream, modelLoaded);\n}\n\nconst modelLoaded = () => {\n  setInterval(getPitch, 400);\n}\n\nconst getPitch = () => {\n  pitch.getPitch((err: Event, frequency: number) => {\n    if (!frequency) {\n      freq.value = null;\n      note.value = null;\n      return;\n    }\n    freq.value = +frequency.toFixed(3);\n    note.value = tuner.getStringByFrequency(freq.value);\n  })\n}\n\nconst turnMicOff = () => {\n  if (!stream) return;\n  stream.getAudioTracks().forEach(track => track.stop());\n}\n\n</script>\n<style lang=\"scss\">\n.tuner-title {\n  margin-bottom: 10px;\n}\n\n.tuner-btn {\n  width: 100%;\n  margin-bottom: 10px;\n  border-radius: 8px;\n  padding: 20px 0;\n  border: none;\n  line-height: 32px;\n  cursor: pointer;\n}\n\n.tuner-settings {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 10px;\n\n  &__title {\n    grid-column: 1 / 3;\n  }\n\n  &__tuning {\n    grid-column: 1 / 3;\n    text-transform: capitalize;\n  }\n}\n</style>\n","<template>\n  <section class=\"tuner\">\n    <div class=\"tuner-inner\">\n      <div class=\"tuner-note\">\n        {{note ? `${note} - `: 'Not detected'}}\n        {{ tunerTarget ? tunerTarget : '' }}\n      </div>\n      <div class=\"tuner-arrow\" :style=\"{'transform': `rotate(${tunerArrowAngle}deg)`}\"></div>\n      <div class=\"tuner__big-note\">{{ note ? note : '' }}</div>\n      <div class=\"tuner__big-freq\">{{ frequency ? Math.round(frequency) : '' }}</div>\n    </div>\n  </section>\n</template>\n<script setup lang=\"ts\">\nimport Tuner from '../js/helpers/Tuner';\nimport { computed } from \"vue\";\n\nconst props = defineProps({\n  note: String,\n  frequency: Number,\n})\n\nconst tuner = new Tuner();\nconst tunerArrowAngle = computed(() => {\n  if (!tunerTarget.value || !props.frequency) return null;\n  return tuner.getTunerArrowAngle(tunerTarget.value, props.frequency);\n});\n\nconst tunerTarget = computed(() => {\n  if (!props.note && !props.note) return null;\n  return tuner.getFrequencyByNote(props.note);\n});\n\n</script>\n\n<style lang=\"scss\">\n.tuner {\n  background-color: #2f3640;\n  border-radius: 8px;\n  padding: 20px;\n\n  &-inner {\n    background: #EFEFEF;\n    border-radius: 8px;\n    width: 100%;\n    height: 250px;\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n    position: relative;\n  }\n\n  &-note {\n    display: block;\n    margin: 5px auto 10px;\n    text-align: center;\n  }\n\n  &-arrow {\n    margin: 0 auto 10px;\n    width: 2px;\n    flex: 1;\n    transform-origin: bottom;\n    background-color: #2f3640;\n    transition: .1s;\n  }\n\n  &__big-note,\n  &__big-freq {\n    position: absolute;\n    transform: translateY(-50%);\n    top: 50%;\n    left: 9%;\n    font-size: 102px;\n    font-weight: 700;\n    color: #2f3640;\n    opacity: .4;\n  }\n\n  &__big-note {\n    left: unset;\n    right: 9%;\n  }\n\n}\n</style>\n","<template>\n  <section class=\"container\">\n    <h3 class=\"title\">Oops...</h3>\n    <h4 class=\"subtitle\">This page does not seem to exist</h4>\n  </section>\n</template>\n\n<style>\n\n\n.title {\n  text-align: center;\n  margin-top: 55px;\n  margin-bottom: 15px;\n  font-size: 21px;\n  font-family: 'Nunito', sans-serif;\n  color: #2f3640;\n}\n\n.subtitle {\n  text-align: center;\n  font-size: 18px;\n  font-family: 'Nunito', sans-serif;\n  color: #2f3640;\n}\n\n</style>\n","<template>\n  <section class=\"container applicature\">\n    <h2 class=\"applicature-title\">Chord Applicature</h2>\n\n    <div class=\"applicature-root\">\n      <h4 class=\"applicature-root__title\">Choose root:</h4>\n      <div class=\"applicature-root__alter\">\n        <button\n          :class=\"['select-root__alter', {'active': isSharp}]\"\n          @click=\"isSharpUpdate(true)\"\n        >\n          Sharp\n        </button>\n        <button\n          :class=\"['select-root__alter', {'active': !isSharp}]\"\n          @click=\"isSharpUpdate(false)\"\n        >\n          Flat\n        </button>\n      </div>\n      <div class=\"applicature-root__notes\">\n        <RootNote\n          v-for=\"note in notes\"\n          @rootnote-update=\"rootUpdate\"\n          :note=\"note\"\n          :root=\"root\"\n        />\n      </div>\n    </div>\n\n    <div class=\"applicature-type\">\n      <h4 class=\"applicature-type__title\">Choose chord type:</h4>\n      <div class=\"applicature-type__types\">\n        <button\n          :class=\"['applicature-type__type', { 'active': currentChordType === chordType }]\"\n          v-for=\"chordType in chordTypes\"\n          @click=\"chordTypeUpdate(chordType)\"\n        >\n          {{ chordType.replace('_', ' ') }}\n        </button>\n      </div>\n    </div>\n    <ui-canvas class=\"applicature-chord\" instrument=\"piano\" :scale=\"currentChordNotes\" />\n  </section>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\nimport RootNote from '../components/RootNote.vue';\nimport UiCanvas from './../components/ui/UiCanvas.vue';\nimport Chord from '../js/helpers/Chord.ts';\n\nconst DEFAULT_ROOT = 'C';\nconst DEFAULT_TYPE = 'major';\nconst chord = ref(new Chord());\nconst chordTypes = chord.value.getPatterns();\nconst notes = computed(() => chord.value.getNotes());\nconst isSharp = computed(() => chord.value.isSharp);\nconst root = ref(DEFAULT_ROOT);\nconst currentChordType = ref(DEFAULT_TYPE);\nconst currentChordNotes = computed(() => chord.value.calcChord(root.value, currentChordType.value));\n\nconst rootUpdate = (rootNote) => {\n  root.value = rootNote;\n}\n\nconst isSharpUpdate = (state) => {\n  chord.value.setIsSharp(state);\n  console.log(chord.value.isSharp);\n}\n\nconst chordTypeUpdate = (type) => {\n  currentChordType.value = type;\n}\n\n</script>\n\n<style scoped lang=\"scss\">\n.applicature {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  column-gap: 10px;\n  font-family: Nunito, sans-serif;\n  color: #2f3640;\n}\n\n.applicature-title {\n  text-align: center;\n  margin: 0 auto 15px;\n  font-size: 22px;\n  display: block;\n  grid-column: 1 / 3;\n}\n\n.applicature-root {\n  grid-column: 1 / 2;\n\n  &__title {\n    text-align: center;\n    margin-bottom: 10px;\n  }\n\n  &__notes {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    gap: 5px;\n\n    button {\n      width: 100%;\n    }\n  }\n\n  &__alter {\n    display: flex;\n    justify-content: space-between;\n    gap: 5px;\n    margin-bottom: 10px;\n    position: relative;\n\n    &:after {\n      content: '';\n      width: 98%;\n      height: 2px;\n      top: calc(100% + 4px);\n      left: 50%;\n      transform: translateX(-50%);\n      background-color: #2f3640;\n      position: absolute;\n      border-radius: 8px;\n    }\n\n    button {\n      width: 50%;\n      height: 40px;\n      color: #fff;\n      background-color: #2f3640;\n      border: 2px solid #2f3640;\n      border-radius: 8px;\n      justify-content: center;\n      align-items: center;\n      display: flex;\n      cursor: pointer;\n\n      &.active {\n        background-color: #FFFFFF;\n        color: #2f3640;\n      }\n    }\n  }\n}\n\n.applicature-type {\n  grid-column: 2 / 3;\n  display: flex;\n  flex-direction: column;\n\n  &__types {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 5px;\n    flex: 1;\n  }\n\n  &__title {\n    text-align: center;\n    margin-bottom: 10px;\n  }\n\n  &__type {\n    width: 100%;\n    height: 100%;\n    color: #FFFFFF;\n    background-color: #2F3640;\n    border: 2px solid #2F3640;\n    border-radius: 8px;\n    justify-content: center;\n    align-items: center;\n    display: flex;\n    cursor: pointer;\n    text-transform: capitalize;\n\n    &.active {\n      color: #2F3640;\n      background-color: #FFFFFF;\n      border: 2px solid #2F3640;\n    }\n  }\n}\n\n.applicature-chord {\n  grid-column: 1 / 3;\n}\n</style>\n\n\n","<template>\n  <div :class=\"['ui-select', {'active': isActive }]\" ref=\"select\">\n    <div class=\"ui-select__selected\" @click=\"toggleAcitve\">\n      {{ currentValue ? currentValue : options[0] }}\n    </div>\n    <div class=\"ui-select__options\">\n      <template v-for=\"option in options\">\n        <ui-custom-select-option :option=\"option\" @option-selected=\"updateSelect\" />\n      </template>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport UiCustomSelectOption from './UiCustomSelectOption.vue';\nimport { ref } from 'vue';\n\nconst props = defineProps({\n  options: Array,\n  value: Object,\n})\n\nconst emit = defineEmits(['select']);\n\nconst defaultValue = props.options[0].name ? props.options[0].name : props.options[0];\nconst currentValue = ref(props.value ? props.value : defaultValue);\nconst isActive = ref(false);\nconst select = ref(null);\n\nconst closeSelect = (e) => {\n  if (select.value && !select.value.contains(e.target)) {\n    isActive.value = false;\n  }\n}\n\nconst toggleAcitve = () => {\n  isActive.value = !isActive.value;\n  if (!isActive.value) {\n    document.removeEventListener('click', closeSelect);\n    return;\n  }\n  document.addEventListener('click', closeSelect);\n}\n\nconst updateSelect = (selected) => {\n  isActive.value = false;\n  currentValue.value = selected.name ? selected.name : selected;\n  emit('select', selected);\n}\n\n</script>\n\n<style lang=\"scss\">\n.ui-select {\n  border-radius: 8px;\n  border: 0;\n  position: relative;\n  box-sizing: border-box;\n  width: 100%;\n\n  &.active {\n    .ui-select__options {\n      max-height: 240px;\n      opacity: 1;\n      overflow-y: scroll;\n      outline: none;\n      z-index: 1;\n      box-shadow: 1px 4px 21px 0 rgb(0 0 0 / 85%);\n    }\n\n    .ui-select__selected {\n      border-radius: 8px 8px 0 0;\n    }\n  }\n\n  &__selected {\n    background: #2f3640;\n    border-radius: 8px;\n    color: #f5f6fa;\n    position: relative;\n    padding: 10px 15px;\n    cursor: pointer;\n    order: 0;\n    z-index: 2;\n\n    &::after {\n      content: '';\n      background-image: url('/src/assets/images/arw.svg');\n      background-size: contain;\n      background-repeat: no-repeat;\n      position: absolute;\n      width: 20px;\n      height: 20px;\n      transform: translateY(-50%);\n      right: 10px;\n      top: 50%;\n      transition: all 0.4s;\n    }\n  }\n\n  &__options {\n    box-sizing: border-box;\n    background: #2f3640;\n    color: #f5f6fa;\n    max-height: 0;\n    width: 100%;\n    opacity: 0;\n    border-radius: 0 0 8px 8px;\n    overflow: hidden;\n    order: 1;\n    position: absolute;\n    top: 100%;\n  }\n}\n</style>\n\n","<template>\n  <div class=\"option\" @click=\"$emit('option-selected', option)\">\n    <input type=\"radio\" class=\"radio\" :id=\"option.value ? option.value : option\" name=\"category\"/>\n    <label :for=\"option.value ? option.value : option\">{{ option.name ? option.name : option }}</label>\n  </div>\n</template>\n\n<script setup>\ndefineProps({\n  option: Object | String | Number,\n});\n\ndefineEmits([\n  'option-selected'\n]);\n</script>\n\n<style lang=\"scss\">\n.option {\n  padding: 10px 15px;\n  cursor: pointer;\n  transition: .2s;\n\n  &:hover {\n    background-color: #FFFFFF;\n    color: #2f3640;\n  }\n\n  label {\n    cursor: pointer;\n  }\n\n  .radio {\n    display: none;\n  }\n}\n\n</style>\n\n","<template>\n  <button :class=\"['select-root__item', { 'active': isRootNote() }]\" @click=\"emit('rootnote-update', note)\">\n    {{ note.toUpperCase() }}\n  </button>\n</template>\n\n<script setup>\nconst props = defineProps({\n  note: String,\n  root: String,\n})\n\nconst emit = defineEmits(['rootnote-update']);\nconst isRootNote = () => {\n  return props.note.toLowerCase() === props.root.toLowerCase();\n}\n\n</script>\n\n<style lang=\"scss\" scoped>\n.select-root__item {\n  width: calc((100% - 25px) / 6);\n  height: 40px;\n  background-color: #2f3640;\n  border: 2px solid #2f3640;\n  border-radius: 8px;\n  color: #FFFFFF;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:focus {\n    outline: 2px solid #FFFFFF;\n  }\n\n  &.active {\n    border: 2px solid #2f3640;\n    background-color: #FFFFFF;\n    color: #2f3640;\n  }\n\n  &:hover {\n    cursor: pointer;\n  }\n}\n\n</style>\n","<template>\n  <div class=\"scale\">\n    <h2 class=\"scale__title\">Current scale:</h2>\n    <table class=\"scale__table\">\n      <tbody>\n      <tr class=\"scale__steps\">\n        <td>Step:</td>\n        <td v-for=\"(_, index) in scale\">\n          {{ romanize(index + 1) }}\n        </td>\n      </tr>\n      <tr class=\"scale__notes\">\n        <td>Note:</td>\n        <td v-for=\"note in scale\">\n          {{ note }}\n        </td>\n      </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script setup>\nimport romanize from './../js/helpers/romanizeNumbers';\n\ndefineProps({\n  scale: Array,\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.scale {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: 40px auto 10px;\n  color: #FFFFFF;\n  width: 100%;\n\n  &__title {\n    font-weight: 400;\n    text-align: left;\n    margin-bottom: 10px;\n    color: #2f3640;\n  }\n\n  .scale__table {\n    border-collapse: separate;\n    border-radius: 8px;\n    border: 2px solid #d3d3d3;\n    background-color: #2f3640;\n    border-spacing: 0;\n    width: 100%;\n\n    tr:first-child td {\n      border-bottom: 2px solid #d3d3d3;\n    }\n\n    &.pentatonic tr td:nth-last-of-type(-n+2) {\n      display: none;\n    }\n  }\n\n  td {\n    width: calc(100% / 8);\n    padding: 10px 0;\n    text-align: center;\n\n    &:not(:last-child) {\n      border-right: 2px solid #d3d3d3;\n    }\n  }\n}\n</style>\n"],"names":[],"version":3,"file":"index.75f14d4e.css.map","sourceRoot":"/__parcel_source_root/"}